import Product from 'App/Moldels/Product'
import { answerCallbackQuery, sendMessage, sendText } from 'App/Services/TelegramBot'
import { getIdRegex } from '../../../util/regex'
import { DeleteCommand, UpdateCommand } from '../enums'
import { ICallbackQuery, IMessage } from '../types'

export const createProduct = async (msg: IMessage) => {
  try {
    const data = msg.text.split('\n').map((str) => str.trim())
    if (data.length < 7 || data.length > 8) {
      sendText(msg.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö')
      return false
    }

    const categoryId = parseInt(data[7])

    const product = { name: data[0], price: parseInt(data[1]) || 0, currency: data[2], brand: data[3], color: data[4], size: data[5], gender: data[6] }

    if (categoryId) await Product.create({ ...product, categoryId })
    else await Product.create(product)

    sendText(msg.chat.id, `–¢–æ–≤–∞—Ä ${data[0]} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`)
    return true
  } catch (error) {
    console.error(error)
    sendText(msg.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    return false
  }
}

export const viewProducts = async (msg: IMessage) => {
  try {
    const products = await Product.query().preload('Category')
    const data = {
      'reply_markup': {
        'inline_keyboard': [
          [
            {
              'text': 'üóëÔ∏è',
              'callback_data': DeleteCommand.DELETE_PRODUCT,
            },
            {
              'text': '‚úçÔ∏è',
              'callback_data': UpdateCommand.UPDATE_PRODUCT,
            },
          ],
        ],
      },
    }

    products.forEach((product) => {
      sendMessage(msg.chat.id, {
        text: `ID: ${product.id} \n–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name} \n–¶–µ–Ω–∞: ${product.price}\n–í–∞–ª—é—Ç–∞: ${product.currency}\n–ë—Ä–µ–Ω–¥: ${product.brand}\n–¶–≤–µ—Ç: ${product.color}\n–†–∞–∑–º–µ—Ä: ${
          product.size
        }\n–ü–æ–ª: ${product.gender} ${product.Category.name ? '\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ' + product.Category.name : ''}`,
        ...data,
      })
    })
  } catch (error) {
    console.error(error)
    return sendText(msg.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
  }
}

export const deleteProduct = async (msg: ICallbackQuery) => {
  try {
    const id = getIdRegex(msg.message.text)
    if (!id) return sendText(msg.message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é :(')

    await Product.query().where('id', id).delete()

    const data = {
      callback_query_id: msg.id,
      text: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ :)',
    }

    return answerCallbackQuery(msg.message.chat.id, data)
  } catch (error) {
    console.error(error)
    return sendText(msg.message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
  }
}

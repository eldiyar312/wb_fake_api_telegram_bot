import Database from '@ioc:Adonis/Lucid/Database'
import { clientSendMessage, clientSendText } from 'App/Services/WBClientBot'
import { CreateCommand } from '../enums'
import { IMessage } from '../types'

export const viewProducts = async (msg: IMessage) => {
  try {
    const { rows: products } = await Database.rawQuery(
      `SELECT 
        p.*, stocks.quantity as quantity, categories.name as category_name, warehouses.name as warehouse_name
      FROM products p
        LEFT JOIN stocks ON stocks.product_id = p.id
        LEFT JOIN categories ON categories.id = p.category_id
        LEFT JOIN warehouses ON warehouses.id = stocks.warehouse_id
      GROUP BY p.id, categories.name, stocks.quantity, warehouses.name
      ORDER BY p.created_at DESC`
    )

    if (!products || !products.length) return clientSendText(msg.chat.id, '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö :(')

    const data = {
      reply_markup: {
        'inline_keyboard': [
          [
            {
              'text': '–ó–∞–∫–∞–∑–∞—Ç—å üß∫',
              'callback_data': CreateCommand.CREATE_ORDER,
            },
          ],
        ],
      },
    }

    products.forEach((product) => {
      clientSendMessage(msg.chat.id, {
        text: `ID: ${product.id} \n–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name} \n–¶–µ–Ω–∞: ${product.price}\n–í–∞–ª—é—Ç–∞: ${product.currency}\n–ë—Ä–µ–Ω–¥: ${product.brand}\n–¶–≤–µ—Ç: ${product.color}\n–†–∞–∑–º–µ—Ä: ${
          product.size
        }\n–ü–æ–ª: ${product.gender} ${product.category_name ? '\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ' + product.category_name : ''} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.quantity} ${
          product?.warehouse_name ? '\n–°–∫–ª–∞–¥: ' + product.warehouse_name : ''
        }`,
        reply_markup: product.quantity ? data.reply_markup : {},
      })
    })
  } catch (error) {
    console.error(error)
    return clientSendText(msg.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
  }
}
